<?php

/**
 * Created by PhpStorm.
 * User: rmukherjee
 * Date: 7/21/2017
 * Time: 10:37 AM
 */
class TestProductData extends CFormModel {

    public $id;
    public $credentials;
    public $wsVersion;
    public $fobPoint;
    public $priceType;
    public $partId;
    public $productId;
    public $wsdl;
    public $wsdlMedia;
    public $wsdlInventory;
    public $wsdlPricing;


    /**
     * Declares the validation rules.
     */
    public function rules()
    {
        return array(
            array('id, credentials, wsVersion, productId', 'required'),
            array('id, credentials, wsVersion, fobPoint, priceType, partId, proudctId', 'safe'),
        );
    }

    /**
     * Declares customized attribute labels.
     * If not declared here, an attribute would have a label that is
     * the same as its name with the first letter in upper case.
     */
    public function attributeLabels()
    {
        return array(
            'id' => 'Customer ID',
            'credentials' => 'Credentials',
            'wsVersion' => 'Web service Version',
            'partId' => 'The Part Id',
            'wsdl' => 'End Point',
        );
    }

    public function init()
    {
        $this->wsdl = "http://ppds.hitpromo.net/productData";
        $this->wsdlMedia = "http://ppds.hitpromo.net/productMedia";
        $this->wsdlInventory = "http://ppds.hitpromo.net/inventory";
        $this->wsdlPricing = "http://ppds.hitpromo.net/pricingAndConfiguration";
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @param TestProductData $model
     */
    public static function fetchProductData($model) {
        try {
            $soapClient = new SoapClient($model->wsdl);
            $productData = $soapClient->getProduct(array(
                    'id' => $model->id,
                    'password' => $model->credentials,
                    'wsVersion' => $model->wsVersion,
                    'productId' => $model->productId,
                    'partId' => $model->partId,
                    'localizationCountry' => "",
                    'localizationLanguage' => ""
                )
            );
            return $productData;
        } catch (Exception $exception) {
            return false;
        }
    }

    public static function getProductMedia($model, $mediaType = 'Image'){
        try {
            $soapClient = new SoapClient($model->wsdlMedia);
            $productMedia = $soapClient->getMediaContent(array(
                    'id' => $model->id,
                    'password' => $model->credentials,
                    'wsVersion' => $model->wsVersion,
                    'productId' => $model->productId,
                    'partId' => $model->partId,
                    'localizationCountry' => "",
                    'localizationLanguage' => "",
                    'mediaType' =>  $mediaType
                )
            );
            return $productMedia;
        } catch (Exception $exception) {
            return false;
        }
    }

    public static function getProductInventory($model, $partType = 'Supplier') {
        try {
            $soapClient = new SoapClient($model->wsdlInventory);
            $productInventory = $soapClient->getInventoryLevels(array(
                    'id' => $model->id,
                    'password' => $model->credentials,
                    'wsVersion' => '1.2.1',
                    'productID' => $model->productId,
                    'productIDtype' =>  $partType
                )
            );
            return $productInventory;
        } catch (Exception $exception) {
            Hit::log("Exception is {$exception->getMessage()}");
            return false;
        }
    }

    /**
     * @param TestProductData $model
     * @return bool
     */
    public static function getProductPricing($model) {
        try {
            $soapClient = new SoapClient($model->wsdlPricing);
            $productPricing = $soapClient->getConfigurationAndPricing(array(
                    'id' => $model->id,
                    'password' => $model->credentials,
                    'wsVersion' => '1.0.0',
                    'productId' => $model->productId,
                    'currency' =>  'USD',
                    'fobId' => '1',
                    'priceType' => 'List',
                    'localizationCountry' => '',
                    'localizationLanguage' => '',
                    'configurationType' => ''
                )
            );
            return $productPricing;
        } catch (Exception $exception) {
            Hit::log("Exception is {$exception->getMessage()}");
            return false;
        }
    }
}